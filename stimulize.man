.\" Manpage for stimulize.
.\" Create a git pull request at https://github.com/sergiolemus/stimulize 
.TH man 1 "28 March 2019" "1.0" "STIMULIZE User Manual"
.SH NAME
.B stimulize 
\- create 
.I irsim 
command scripts easily and programmatically

.SH SYNOPSIS
.B stimulize 
-h[elp]
.br
.B stimulize
-a[nalyzer] {a_nodes} -v[ector] {v_nodes} [options]

.SH DESCRIPTION
.I stimulize
creates an irsim cmd format from given inputs. It will display {a_nodes} on the analyzer window
and will step through input combinations of {v_nodes}. This output can be piped to a file
and imported to either standalone, terminal
.I irsim
or 
.I GNU Electric
irsim (available as SFS extension) easily.

.SH OPTIONS
If no 
.I stepsize 
is given, the default is set to 5(ns). If no test sequence is provided, the program will
automatically step through all combinations of {v_nodes} through Gray's code.
.br
.PP
.TP
.IR \-a " " a_nodes
List which nodes should be printed on the analyzer window. Arguments should be space seperated
.TP
.IR \-h
help
.TP
.IR \-s " " stepsize
step size, in nanoseconds. If no argument is given, defaults to 5ns
.TP
.IR \-t " " test_sequence
Test sequency, in binary. You can feed the program a sequence of N-bit binary numbers, where
N is the number of v_nodes there are. Arguments should be space seperated. 
.br
If no sequence is given, the program will step through every N bit combination through Gray's code
such that only 1 bit changes during each step.
.TP
.IR \-v " " v_nodes
List which nodes will be controlled as a vector input to the circuit. Arguments should be space seperated

.SH EXAMPLES
.PP
.br
Stepsize: default - 5ns, View A,B,C,OUT in the analyzer, vectorize A,B,C as input, and step through all combinations in
Gray Code order.
.br
\fI% stimulize \-a A B C OUT \-v A B C\fR
.br
| STIMULIZE v3.01
.br
| FILE GENERATED BY COMMAND:
.br
| stimulize -a A B C OUT -v A B C 
.br
stepsize 5
.br
analyzer A B C OUT 
.br
| VECTOR: [A,B,C] = [0,0,0]
.br
l A B C
.br
s
.br
| VECTOR: [A,B,C] = [0,0,1]
.br
h C 
.br
s
.br
| VECTOR: [A,B,C] = [0,1,1]
.br
h B 
.br
s
.br
| VECTOR: [A,B,C] = [0,1,0]
.br
l C 
.br
s
.br
| VECTOR: [A,B,C] = [1,1,0]
.br
h A 
.br
s
.br
| VECTOR: [A,B,C] = [1,1,1]
.br
h C 
.br
s
.br
| VECTOR: [A,B,C] = [1,0,1]
.br
l B 
.br
s
.br
| VECTOR: [A,B,C] = [1,0,0]
.br
l C 
.br
s
.br
| VECTOR: [A,B,C] = [0,0,0]
.br
l A B C 
.br
s
.br
.br
Stepsize: 50ns, View I0,I1,I2,I3,O0,O1 in the analyzer, vectorize I1,I2,I3,I4 as input, and test the
specific cases [I0,I1,I2,I3] = [0,0,0,0] [1,1,1,0] [0,0,1,1] [1,1,1,1].
.br
Pipe the output to test.cmd
.br
\fI% stimulize \-a I0 I1 I2 I3 O0 O1 \-v I0 I1 I2 I3 -s 50 -t 0000 1110 0011 1111\fR
> test.cmd
.br

.SH AUTHOR
Segio Lemus, Joseph Shaker.
.br
Please make all inquiries or bug reports on the github page.
.br
https://github.com/sergiolemus/stimulize